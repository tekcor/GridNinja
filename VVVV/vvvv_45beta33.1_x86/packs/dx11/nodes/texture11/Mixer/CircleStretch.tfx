Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="Texture In 2";>;
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Fader <float uimin=0.0; float uimax=1.0;> = 0.5;
};

float DistanceFromCenterToSquareEdge(float2 dir)
{
	dir = abs(dir);
	float dist = dir.x > dir.y ? dir.x : dir.y;
	return dist;
}

float4 pCircleStretch(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{
	float2 center = float2(0.5,0.5);
	float radius = Fader * 0.7;
	float2 toUV = uv - center;
	float len = length(toUV);
	float2 normToUV = toUV / len;
	
	if(len < radius)
	{
		float distFromCenterToEdge = -DistanceFromCenterToSquareEdge(normToUV);
		float2 edgePoint = center + distFromCenterToEdge * normToUV;
	
		float minRadius = min(radius, distFromCenterToEdge);
		float percentFromCenterToRadius = len / minRadius;
		
		float2 newUV = lerp(center, edgePoint, percentFromCenterToRadius);
		return tex0.SampleLevel(s0, newUV,0);
	}
	else
	{
		float distFromCenterToEdge = DistanceFromCenterToSquareEdge(normToUV);
		float2 edgePoint = center + distFromCenterToEdge * normToUV;
		float distFromRadiusToEdge = distFromCenterToEdge - radius;
		
		float2 radiusPoint = center + radius * normToUV;
		float2 radiusToUV = uv - radiusPoint;
		
		float percentFromRadiusToEdge = length(radiusToUV) / distFromRadiusToEdge;
		
		float2 newUV = lerp(center, edgePoint, percentFromRadiusToEdge);
		return tex1.SampleLevel(s0, newUV,0);
	}
}

technique10 CircleStrech{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pCircleStretch()));}
}
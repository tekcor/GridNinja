Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="Texture In 2";>;
Texture2D tex2 <string uiname="Control";>;
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Fader <float uimin=0.0; float uimax=1.0;> = 0.5;
	float randomSeed <string uiname = "Random Seed";> = 0.5;
};

float4 pRadialWiggle(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target{
	
	float2 center = float2(0.5,0.5);
	float2 toUV = uv - center;
	float distanceFromCenter = length(toUV);
	float2 normToUV = toUV / distanceFromCenter;
	float angle = (atan2(normToUV.y, normToUV.x) + 3.141592) / (2.0 * 3.141592);
	float offset1 = tex2.SampleLevel(s0, float2(angle, frac(Fader/3 + distanceFromCenter/5 + randomSeed)), 0).x * 2.0 - 1.0;
	float offset2 = offset1 * 2.0 * min(0.3, (1-Fader)) * distanceFromCenter;
	offset1 = offset1 * 2.0 * min(0.3, Fader) * distanceFromCenter;
	
	float4 c1 = tex0.SampleLevel(s0, frac(center + normToUV * (distanceFromCenter + offset1)), 0); 
    float4 c2 = tex1.SampleLevel(s0, frac(center + normToUV * (distanceFromCenter + offset2)), 0);

	return lerp(c1, c2, Fader);
}

technique10 RadialWiggle{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pRadialWiggle()));}
}

Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="Texture In 2";>;
Texture2D tex2 <string uiname="Control";>;
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Fader <float uimin=0.0; float uimax=1.0;> = 0.5;
	float amount <string uiname="Amount";> = 1.0;
	float randomSeed<float uimin=0.0; float uimax=1.0;string uiname="Random Seed";> = 0.5;
};

float DistanceFromCenterToSquareEdge(float2 dir)
{
	dir = abs(dir);
	float dist = dir.x > dir.y ? dir.x : dir.y;
	return dist;
}

float4 pCrumble(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{
	float2 offset = (tex2.SampleLevel(s0, float2(uv.x/10.0, frac(uv.y/10.0 + min(0.9, randomSeed))),0).xy * (amount*10.0) - 1.0);
	float2 center = uv + offset/100.0;
	float2 toUV = uv - center;
	float len = length(toUV);
	float2 normToUV = toUV / len;
	float angle = atan2(normToUV.y,normToUV.x);
	
	angle += 3.141592*2.0*Fader;
	float2 newOffset;
	sincos(angle,newOffset.y, newOffset.x); 
	newOffset *= len;
	
	float4 c1 = tex0.SampleLevel(s0, frac(center + newOffset),0);
    float4 c2 = tex1.SampleLevel(s0, frac(center + newOffset),0);

	return lerp(c1, c2, Fader);
}

technique10 Crumble{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pCrumble()));}
}
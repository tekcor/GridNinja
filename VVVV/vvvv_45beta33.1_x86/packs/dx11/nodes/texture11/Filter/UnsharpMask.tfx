Texture2D tex0: PREVIOUS;
float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Amount <float uimin=0.0;> =.25;
	float Shape=0.5;
	float Saturation <float uimin=0.0; float uimax=1.0;> = 0.25;
	float MinRadius <bool visible=false;float uimin=0.0; float uimax=1.0;> = 0.0;
	float MaxRadius <bool visible=false;float uimin=0.0; float uimax=1.0;> = 1.0;
	float Gamma <bool visible=false;float uimin=-1.0; float uimax=1.0;> = 0.0;
	
};

SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};


float4 pUNSHARP(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
    float4 c=tex0.SampleLevel(s0,x,0);
   // c=tex2Dlod(s0,float4(x,0,1));
    float maxl=log2(max(R.x,R.y))+.5;
    float4 sh=0;

    for (float i=0;i<7;i++){
    sh.rgb+=(tex0.SampleLevel(s0,x,maxl*saturate(MaxRadius*lerp(i,7,MinRadius)/7))-tex0.SampleLevel(s0,x,maxl*saturate(MaxRadius*(lerp(i,7,MinRadius)+1)/7))).rgb
    	/pow(2,lerp(i,7,MinRadius)*Shape)
    	*4*Amount
    	/pow(2,MaxRadius/max(R.x,R.y)*pow(2,maxl*MaxRadius));
    }
    sh.rgb=lerp(dot(sh.rgb,1.)/3.,sh.rgb,Saturation);
    //sh.rgb*=pow(2,Shape*7);
    //sh.rgb/=pow(2,lerp(Shape*0,-Balance*6,Balance<0));
    sh.rgb=sign(sh.rgb)*pow(abs(sh.rgb)*5,pow(2,Gamma*2))/5;
    sh/=1+c;
    //c.rgb*=pow(2,sh);
    c.rgb+=sh.rgb*pow(pow(2,3*min(Shape,0)),2);
	c=max(0,c);
    return c;
}
float4 pMIPS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	return max(0,tex0.SampleLevel(s0,x,0));
}
technique10 UnsharpMask{
	pass P0 <bool mips=true;>
	{SetPixelShader(CompileShader(ps_4_0,pMIPS()));}
	pass P1
	{SetPixelShader(CompileShader(ps_4_0,pUNSHARP()));}
}




Texture2D tex1: INITIAL;
Texture2D tex0: PREVIOUS;
SamplerState s0:IMMUTABLE <string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float Amount=1;
	float Shape=0.1;
	float Hue=0;
	float Saturation=1;
	float Value=1;
};

#include "ColorSpace.fxh"
float4 pUNSHARP_HSV(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{

	float4 c=tex0.SampleLevel(s0,x,0);
	float2 ch2=c.rg*2-1;
	float lod=log2(max(R.x,R.y));
	for(int i=1;i<min(16,lod);i++){
		c+=float4(tex0.SampleLevel(s0,x,i).xyz,1)*pow(pow(.5,Shape),i);
	}
	c.xyz/=c.a;

	
	float3 h=c.rgb;
	float2 h2=c.rg*2-1;
	h.x=-atan2(h2.y,-h2.x)/acos(-1)/2+.5;
	h.y=length(h2.xy);

	
	c.rgb=tex1.SampleLevel(s0,x,0).rgb;
	float3 rh=RGBtoHSV(c.rgb);
	float am=Amount/pow(pow(.5,Shape),.5);

	h2=ch2+(ch2-h2)*Hue*am;
	//h2=ch2;
	rh.x=-atan2(h2.y,-h2.x)/acos(-1)/2+.5;
	rh.y=rh.y+(rh.y-h.y)*Saturation*am;
	rh.y=max(rh.y,length(h2));
	rh.z=rh.z+(rh.z-h.z)*Value*am;
	rh.z=max(0,rh.z);
	rh.y=max(0,rh.y);
	c.rgb=HSVtoRGB(rh);
	
	c.a=1;
	return c;
}
float4 pHSVMIPS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
	float4 c=tex0.SampleLevel(s0,x,0);
	float3 h=RGBtoHSV(c.rgb);
	
	c.rg=sin((h.x+float2(.25,0))*acos(-1)*2)*h.y;
	c.rg=c.rg*.5+.5;
	c.b=h.z;
	return c;
}
technique10 UnsharpHSV{
	pass P0 <bool mips=true;>
	{SetPixelShader(CompileShader(ps_4_0,pHSVMIPS()));}
	pass P1
	{SetPixelShader(CompileShader(ps_4_0,pUNSHARP_HSV()));}
}




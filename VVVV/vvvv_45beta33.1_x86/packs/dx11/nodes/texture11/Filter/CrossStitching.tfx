Texture2D tex0: PREVIOUS;
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=WRAP;AddressV=WRAP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0)
{
	float4 ColorA <string uiname = "Background Color"; bool color=true;> = {0, 0, 0, 1};
	float stitching_size <float uimin=0.0; string uiname="Stiching Size";> = 20.0;
	int invert <string uiname="Invert"; int uimin=0; int uimax=1;> = 0;
};

float4 Stitching(sampler2D tex, float2 uv)
{
  float4 c = float4(0.0, 0.0, 0.0, 0.0);
  float size = stitching_size;
  float2 cPos = uv * float2(R.x, R.y);
  float2 tlPos = floor(cPos / float2(size, size));
  tlPos *= size;
  int remX = int(cPos.x% size);
  int remY = int(cPos.y% size);
  if (remX == 0 && remY == 0)
  tlPos = cPos;
  float2 blPos = tlPos;
  blPos.y += (size - 1.0);
  if ((remX == remY) ||
     (((int(cPos.x) - int(blPos.x)) == (int(blPos.y) - int(cPos.y)))))
  {
    if (invert == 1)
      c = ColorA;
    else
      c = tex0.SampleLevel(s0, tlPos * float2(1.0/R.x, 1.0/R.y), 0) * 1.4;
  }
  else
  {
    if (invert == 1)
      c = tex0.SampleLevel(s0, tlPos * float2(1.0/R.x, 1.0/R.y), 0) * 1.4;
    else
      c = ColorA;
  }
  return c;
}

float4 pCrossStitching(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{
	return Stitching(s0, uv);	
}

technique10 CrossStitching
{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pCrossStitching()));}
}

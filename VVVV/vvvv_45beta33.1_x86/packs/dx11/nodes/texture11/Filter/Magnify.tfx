Texture2D tex0: PREVIOUS;

SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float2 center = 0.5;
	float inner_radius <string uiname = "Inner Radius"; float uimin = 0.0;> = 0.25;
	float magnification <string uiname = "Magnification";> = 2.0;
	float outer_radius <string uiname = "Outer Radius"; float uimin = 0.0;> = 0.5;
};

float4 pMagnify(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{	
	float2 center_to_pixel = uv - center;
	float distance = length(center_to_pixel);
	float4 color;
	float2 sample_point;
	
	if (distance < outer_radius)
	{
		if (distance < inner_radius)
		{
			sample_point = center + (center_to_pixel/magnification);
		}
		else 
		{
			float radius_diff = outer_radius - inner_radius;
			float ratio = (distance - inner_radius)/radius_diff;
			ratio = ratio * 3.14159;
			float adjusted_ratio = cos(ratio);
			adjusted_ratio = adjusted_ratio + 1;
			adjusted_ratio = adjusted_ratio / 2;
			sample_point = ((center+(center_to_pixel / magnification))*(adjusted_ratio))+(uv*(1-adjusted_ratio));
		}
	}
	else
	{
		sample_point = uv;
	}
	return tex0.SampleLevel(s0, sample_point, 0);	
}

technique10 Magnify{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pMagnify()));}
}

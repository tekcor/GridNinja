Texture2D tex0 : PREVIOUS;
Texture2D tex1 : INITIAL;
SamplerState Sampler <bool visible=false;> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
cbuffer controls:register(b0){
	float Amount <float uimin=0.0;> =1.0;
	float Shape = 0.0;
	float Highlight <float uimin=0.0;string uiname="Highlight Boost";> =0.0;
	float PostBrightness <float uimin=0.0;string uiname="Exposure";> =1.0;
	float Saturation <float uimin=0.0;> =1.0;
	float AutoExposure <float uimin=0.0;float uimax=1.0;string uiname="Auto Exposure Factor";> =0.0;
	float MaxRadius <bool visible=false; float uimin=0.0;float uimax=1.0;string uiname="Max Radius";> =1.0;
	float PreBlurWidth <bool visible=false;> =8.0;
};
float2 R:TARGETSIZE;
#define PW (4.0)
#define PW0 (7.0)
#define PreGamma pow(2,Highlight)
float mx(float3 c){return max(c.x,max(c.y,c.z));}
float2 r2d(float2 x,float a){a*=acos(-1)*2;return float2(cos(a)*x.x+sin(a)*x.y,cos(a)*x.y-sin(a)*x.x);}


float3 safenormalize(float3 x){
		x=lerp(x,x+.00001,x==0);
		return normalize(x);
}

float4 pPRE(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
    float lod=1+log2(max(R.x,R.y));
    float4 c=tex0.Sample(Sampler,x);
	for(float i=0;i<7;i++){
		c+=tex0.SampleLevel(Sampler,x+sin((i/7.+float2(.25,0))*acos(-1)*2)*PreBlurWidth/R,1);
	}
	c/=7;
	//c.rgb=lerp(dot(c.rgb,1./3),c.rgb,Saturation);
	float mc=min(c.r,min(c.g,c.b));
	float gs=Saturation;
	c.rgb=(c.rgb-mc)*gs+lerp(mc,dot(c.rgb,1./3),saturate(1-gs));
	//c.rgb=pow(c.rgb,PreGamma);
	c.rgb=safenormalize(c.rgb)*pow(length(c.rgb)/sqrt(2),PreGamma)*sqrt(2);
	//c.rgb=pow(c.rgb,PreGamma);
	c.a=pow(length(tex0.Sample(Sampler,x).rgb),PW0);
    return c;
}
float4 pGLOW(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
    float lod=log2(max(R.x,R.y));
	float4 s=tex1.Sample(Sampler,x);
    float4 g=0;
    for(float i=0;i<min(lod-(1-MaxRadius*lod),14);i++){
    	g+=pow(max(0,float4(tex0.SampleLevel(Sampler,x+r2d((x*R)%4-1.5,i*.25+.125)/R*.5*pow(2,i),i+1).rgb,1)*pow(2,i*Shape-lod+1)),.8)*saturate(MaxRadius*lod-i+1);
    }
	g.rgb/=g.a;
	//g.rgb/=tex2Dlod(s0,float4(x,0,33)).a;
	float srcAvg=length(tex1.SampleLevel(Sampler,x,33).rgb);
	float srcMax=pow(max(0,tex0.SampleLevel(Sampler,x,33).a),1./PW0);
	//g.rgb*=srcAvg/srcMax;
	g.rgb*=Amount;
	float4 c=0;
	c.rgb=g.rgb;
	c.a=pow(length(g.rgb+safenormalize(s.rgb)*sqrt(2)*pow(length(s.rgb)/sqrt(2),PreGamma)),PW);
    return c;
}

float4 pMIX(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_Target{
    float lod=1+log2(max(R.x,R.y));
    float4 s=tex1.Sample(Sampler,x);
	float4 g=tex0.SampleLevel(Sampler,x,3);
	//float4 c=tex2D(s0,x);
	for(float i=0;i<5;i++){
		g+=tex0.SampleLevel(Sampler,x+sin((i/5.+float2(.25,0))*acos(-1)*2)*2/R,3);
	}
	g/=6;
	float4 c=s;
	float av=pow(max(0,tex0.SampleLevel(Sampler,x,33).a),1./PW);
	//s=pow(s,PreGamma);
	//s.rgb=safenormalize(s.rgb)*sqrt(2)*pow(length(s.rgb)/sqrt(2),PreGamma);
	
	//float mc=min(c.r,min(c.g,c.b));
	//c.rgb=(c.rgb-mc)*pow(Saturation,.3)+lerp(mc,dot(c.rgb,1./3),saturate(1-pow(Saturation,.3)));
	c=pow(max(0,s),1+g*2)+g;
	//c=s;
	c*=PostBrightness/lerp(1,av+.1,AutoExposure);
	//c=s+g*Brightness*318;
	
	//c=g+pow(s,1+g);
	//c.rgb=normalize(s.rgb)*pow(length(s.rgb)/sqrt(3),1+g*2)*sqrt(3)+g;
	//c/=1+3*tex2Dlod(s0,float4(x,0,33));
	c.a=s.a;
	
	c.a=1;
    return c; 
}
technique10 Glow{
	pass P0 < bool mips=true; string format="R16G16B16A16_Float"; >
	{SetPixelShader(CompileShader(ps_4_0,pPRE()));}
	pass P1 < bool mips=true; string format="R16G16B16A16_Float"; >
	{SetPixelShader(CompileShader(ps_4_0,pGLOW()));}
	pass P2
	{SetPixelShader(CompileShader(ps_4_0,pMIX()));}
}




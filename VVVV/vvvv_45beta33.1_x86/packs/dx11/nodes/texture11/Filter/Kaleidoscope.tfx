Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="Control";>;
SamplerState s0 <string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=MIRROR;AddressV=MIRROR;};
SamplerState s1 <bool visible=false;string uiname="Control Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

cbuffer controls:register(b0){

	int Divisions <float uimin=1;> =3;
	int Iterations <float uimin=1;float uimax=70;> =5;
	float Rotate=0;
	float Zoom =.5;
	float2 Center <float uimin=-1.0; float uimax=1.0;> =0.0;
	float IterationZoom =0;
	
	float2 CellOffset=0;
	float CellRotate =0;
	float2 CellScale =1;
	
	float4 ControlFactor = {1,0,0,0};
	
	bool Aspect <string uiname="Keep Aspect Ratio";> =1;


};

float2 r2d(float2 x,float a){a*=acos(-1)*2;return float2(cos(a)*x.x+sin(a)*x.y,cos(a)*x.y-sin(a)*x.x);}
float2 kal(float2 x,float2 sz){
	float2 dx=(x-.5);
	float an=atan2(dx.x,-dx.y)/acos(-1)/2+.5;	
	float2 xx=r2d(dx,floor(an*sz+.5)/sz);
	xx.x=abs(xx.x);
	xx+=.5;
	return xx;
}
float4 pKALEIDOSCOPE(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	float2 asp=lerp(1,R/R.x,Aspect);

	//R=512;
   // float2 vp=x*R-.25;
	//x=(vp+.5)/R;
	//float2 asp=R/R.x;
	float4 mask=tex1.SampleLevel(s1,x,1);
	float cr=CellRotate+ControlFactor.x*3*mask;
	float2 co=CellOffset+mask.xy*ControlFactor.zw;
	
	float sz=Divisions;
	float zz=pow(2,Zoom*5-1);
	zz*=pow(2,ControlFactor.y*(tex1.SampleLevel(s0,x,1)));
	float2 Off=Center;
	float2 dx=r2d((x-.5+Off)*asp,Rotate)*zz+.5;
	float2 xx=kal(dx,sz);
	for(float i=0;i<min(Iterations-1,90);i++){
		xx*=pow(2,IterationZoom*0.1);
    	if(xx.y>1)xx=kal(float2(xx.x,2-xx.y),sz);	
	}
	//xx=(xx-.5)/asp+.5;
	xx=r2d(xx-.5,cr-Rotate)/asp+.5;
	xx+=co*2-1;
	xx=(xx-.5)*CellScale+.5;
	float4 c=tex0.SampleLevel(s0,xx,0);

    return c;
}


technique10 Kaleidoscope{
	pass P1
	{SetPixelShader(CompileShader(ps_4_0,pKALEIDOSCOPE()));}
}




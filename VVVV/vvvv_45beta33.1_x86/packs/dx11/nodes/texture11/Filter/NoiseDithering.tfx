Texture2D tex0: PREVIOUS;
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 R:TARGETSIZE;

float RandomSeed=0;
int Levels <bool visible=false;float uimin=1.0;> = 256;
float Gamma <float uimin=0.0;> = 1;
float Grain <float uimin=0.0;> = 1;
#include "Noise.fxh"

float4 NoiseDither(float4 c,float2 x,float RandomSeed=0,float Grain=0,float Levels=256,float LevelNoise=1,float AddNoise=1){
	
	float4 nois=_dnoise4(x,RandomSeed);
	float4 nois2=frac(nois.wxyz*sqrt(251));
	c*=Levels;
	c*=pow(2,Grain*0.1*normalize(nois2.wxyz-.5)*pow(length(nois2.wxyz-.5),4));
	c=floor(c)+nois*(frac(c)-.5)*2*LevelNoise+0.5+(nois2-.5)*(AddNoise);
	c/=Levels;
	return c;
}
float4 pRGB(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
    float4 c=tex0.SampleLevel(s0,x,0);
	c=pow(max(0,c),Gamma);
    c=NoiseDither(c,x*R,RandomSeed,Grain,Levels);
    return c;
}

technique10 RGB_8{pass P1 <string format="R8G8B8A8_UNorm";> {SetPixelShader(CompileShader(ps_4_0,pRGB()));}}
technique10 RGB{pass P1{SetPixelShader(CompileShader(ps_4_0,pRGB()));}}